/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT  0
#define LOWER    1
#define RAISE    2
#define BOTH     3
#define MIRROR   4
#define MIRAISE   5
#define MILOWER   6
#define MO_TO(layer) &mo_to layer layer   // Macro to apply momentary-layer-on-hold/to-layer-on-tap to a specific layer

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

&mt {
    tapping-term-ms = <100>;
};

/ {
    behaviors {
        mo_to: behavior_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_to";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
&mt LGUI ESC   &kp N1 &kp N2 &kp N3   &kp N4    &kp N5                           &kp N6    &kp N7      &kp N8    &kp N9  &kp N0   &kp BSLH
&kp CAPS       &kp Q  &kp W  &kp E    &kp R     &kp T                            &kp Y     &kp U       &kp I     &kp O   &kp P    &kp MINUS
&mt LSHIFT TAB &kp A  &kp S  &kp D    &kp F     &kp G                            &kp H     &kp J       &kp K     &kp L   &kp SEMI &mt RSHIFT ENTER
&mt LCTRL DEL  &kp Z  &kp X  &kp C    &kp V     &kp B     &tog MIRROR  &trans    &kp N     &kp M       &kp COMMA &kp DOT &kp FSLH &kp SQT
                             &kp LALT &mo RAISE &mo LOWER &kp BSPC     &kp SPACE &mo RAISE &trans &kp RALT
			>;
		};

		lower_layer {
			bindings = <
&trans &kp F1   &kp F2       &kp F3       &kp F4    &kp F5                  &kp F6 &kp F7   &kp F8   &kp F9    &kp F10  &trans   
&trans &kp F11  &kp F12      &trans       &trans    &trans                  &trans &trans   &kp UP   &trans    &trans   &trans
&trans &kp C_PP &kp C_VOL_UP &kp C_VOL_DN &kp PG_UP &kp PG_DN               &trans &kp LEFT &kp DOWN &kp RIGHT &kp HOME &kp END
&trans &trans   &trans       &trans       &trans    &trans    &trans &trans &trans &trans   &trans   &trans    &trans   &trans
                             &trans       &trans    &trans    &trans &trans &trans &trans   &trans
			>;
		};

		raise_layer {
			bindings = <
&trans &kp N7 &kp N8  &kp N9 &kp KP_ASTERISK &trans               &trans    &trans    &trans           &trans            &trans   &trans
&trans &kp N4 &kp N5  &kp N6 &kp KP_SLASH    &trans               &trans    &trans    &trans           &trans            &trans   &trans
&trans &kp N1 &kp N2  &kp N3 &kp KP_MINUS    &trans               &kp MINUS &kp EQUAL &kp LEFT_BRACE   &kp RIGHT_BRACE   &kp PIPE &kp GRAVE
&trans &kp N0 &kp N0  &kp DOT &kp KP_PLUS    &trans &trans &trans &trans    &kp PLUS  &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp BSLH &kp TILDE
                      &trans &trans          &trans &trans &trans &trans    &trans    &trans
			>;
		};
		
		both_layer {
            		bindings = <
    &bt BT_CLR       &bt BT_SEL 0      &bt BT_SEL 1      &bt BT_SEL 2 &trans       &trans               &trans &trans &trans &trans &trans &trans
    &trans           &trans            &trans            &trans       &trans       &trans               &trans &trans &trans &trans &trans &trans
    &ext_power EP_ON &ext_power EP_OFF &ext_power EP_TOG &trans       &trans       &trans               &trans &trans &trans &trans &trans &trans
    &out OUT_USB     &trans            &out OUT_TOG      &trans       &out OUT_BLE &trans &trans &trans &trans &trans &trans &trans &trans &trans
                                                         &trans       &trans       &trans &trans &trans &trans &trans &trans
            		>;
        	};
		
		mirror_layer {
			bindings = <
&mt LGUI BSLH    &kp N0   &kp N9  &kp N8    &kp N7     &kp N6                          &trans &kp N7 &kp N8  &kp N9 &kp KP_ASTERISK &trans
&kp MINUS        &kp P    &kp O   &kp I     &kp U      &kp Y                           &trans &kp N4 &kp N5  &kp N6 &kp KP_SLASH    &trans
&mt RSHIFT ENTER &kp SEMI &kp L   &kp K     &kp J      &kp H                           &trans &kp N1 &kp N2  &kp N3 &kp KP_MINUS    &trans
&mt LCTRL SQT    &kp FSLH &kp DOT &kp COMMA &kp M      &kp N       &tog MIRROR &trans &trans &kp N0 &kp DOT &trans &kp KP_PLUS     &trans
                                  &kp LALT &mo_to MILOWER DEFAULT &mo MIRAISE &kp SPACE   &trans &trans &trans &trans
			>;
		};

		mirror_raise_layer {
			bindings = <
&trans    &trans   &trans            &trans           &trans     &trans                  &trans    &trans    &trans           &trans            &trans   &trans
&trans    &trans   &trans            &trans           &trans     &trans                  &trans    &trans    &trans           &trans            &trans   &trans
&kp GRAVE &kp PIPE &kp RIGHT_BRACE   &kp LEFT_BRACE   &kp EQUAL  &kp MINUS               &kp MINUS &kp EQUAL &kp LEFT_BRACE   &kp RIGHT_BRACE   &kp PIPE &kp GRAVE
&kp TILDE &kp BSLH &kp RIGHT_BRACKET &kp LEFT_BRACKET &kp PLUS   &trans    &trans &trans &trans    &kp PLUS  &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp BSLH &kp TILDE
                                     &trans           &trans     &trans    &trans &trans &trans    &trans    &trans
			>;
		};

		mirror_lower_layer {
			bindings = <
&trans  &kp F10  &kp F9    &kp F8   &kp F7   &kp F6               &kp F6 &kp F7   &kp F8   &kp F9    &kp F10  &trans   
&trans  &trans   &trans    &kp UP   &trans   &trans               &trans &trans   &kp UP   &trans    &trans   &trans
&kp END &kp HOME &kp LEFT &kp DOWN &kp RIGHT &trans               &trans &kp LEFT &kp DOWN &kp RIGHT &kp HOME &kp END
&trans  &trans   &trans    &trans   &trans   &trans &trans &trans &trans &trans   &trans   &trans    &trans   &trans
                           &trans   &trans   &trans &trans &trans &trans &trans   &trans
			>;
		};


	};
};
